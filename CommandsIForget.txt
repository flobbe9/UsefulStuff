### Java 
    ## path of JAVA_HOME variable
        $> echo %JAVA_HOME%


### Docker
    ## build image (no capital letters)
        $> docker build -t <name_of_image>:<version>

    ## run container (no capital letters, -d is optional, -e only for postgres container)
        $> docker run --name <name_of_container> -d -p 4001:4001 -e POSTGRES_PASSWORD=<password> <name_of_image>:<version>

    ## docker-compose
        $> docker-compose up
    
    ## get ip adress of container
        $> docker inspect <name_of_container> | grep IPAddress


### Jar
    ## create Jar with all files in folder (replace '.' with target files if you don't want all to be added)
        $> jar cf <fileName>.jar . 

    ## create Jar with specified path
        $> jar cf <fileName>.jar -C folderInWhichJarStarts/ .
    
    ## create Jar with mvn (classpath icluded automatically)
        $> mvn package

    ## create Jar with gradle 
        $> gradle bootJar

    ## execute Jar file (works for war files as well, use exact same command but different file prefix)
        $> java -jar <fileName>.jar


### PostgreSQL
    ## access bash
        $> psql -U username

    ## then connect to database
        $> \connect <databaseName>


### MySQL
    ## access bash


### Spring-boot
    ## run api (very first folder with src, pom.xml...)
        $> mvn spring-boot:run
    
    ## run tests (very first folder...)
        $> mvn test


### Node.js
    ## transpile typescript (remember to set "esModuleInterop": true in tsconfig.json for modules and name *.mts instead of *.ts)
        $> tsc.cmd
        or the almighty one:
        $> ts-node-esm <fileName>
    

### SSL
    ## create self signed certificate
        $> keytool -genkeypair -alias <something> -keyalg RSA -keysize 2048 -storetype PKCS12 -keystore <fileName>.p12 -validity 3650


### SSH-key
    ## generate ssh-key for git repo
        $> ssh-keygen -t rsa -b 4096


### ngrok
    ## make localhost port accessible from internet (e.g. localhost:8080: <portnumber>=8080)
        $> ngrok http <portnumber>